// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String     @id @default(cuid())
  email         String     @unique
  password      String?
  name          String?
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  addresses     Address[]
  reviews       Review[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Account model for OAuth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

// Session model for authentication
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Verification token model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

// Address model
model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String?
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Order model
model Order {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items        OrderItem[]
  status       OrderStatus @default(PENDING)
  totalAmount  Float
  taxAmount    Float       @default(0)
  discount     Float       @default(0)
  currency     String      @default("USD")
  paymentId    String?
  shippingAddress Address?  @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  billingAddress  Address?  @relation(fields: [billingAddressId], references: [id])
  billingAddressId String?
  trackingNumber String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

// Order status enum
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// Order item model
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Product model
model Product {
  id          String       @id @default(cuid())
  name        String
  description String?
  price       Float
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  images      ProductImage[]
  variants    ProductVariant[]
  reviews     Review[]
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Product category model
model ProductCategory {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Product image model
model ProductImage {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Product variant model
model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String
  price     Float
  stock     Int      @default(0)
  attributes Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Photo model
model Photo {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  url       String
  name      String?
  size      Int?
  type      String?
  albumId   String?
  album     Album?   @relation(fields: [albumId], references: [id])
  tags      PhotoTag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Album model
model Album {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  photos    Photo[]
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Photo tag model
model PhotoTag {
  id        String   @id @default(cuid())
  name      String   @unique
  photos    Photo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Design model
model Design {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  data        Json
  thumbnail   String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Review model
model Review {
  id                String        @id @default(cuid())
  userId            String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId         String
  product           Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating            Int           // 1-5
  title             String
  comment           String?
  isVerifiedPurchase Boolean       @default(false)
  helpfulCount      Int           @default(0)
  helpfulReviews    HelpfulReview[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([productId])
  @@index([userId])
}

// Helpful Review model
model HelpfulReview {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewId  String
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, reviewId])
  @@index([reviewId])
}